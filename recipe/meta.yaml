# Note: For each release please update the variables in conda_build_config.yaml.
{% set number = 0 %}
{% set git_tag = environ.get("git_tag") %}
{% set core_version = environ.get("core_version", "0.0.0") %}
{% set bindings_version = environ.get("bindings_version", "0.0.0") %}
{% set build_bindings = environ.get("build_bindings", False) %}
{% set build_core = environ.get("build_core", False) %}

{% set core_major_version = core_version.split(".")[0]|int %}
{% set core_minor_version = core_version.split(".")[1]|int %}
{% set core_patch_version = core_version.split(".")[2]|int %}
{% set core_ver = core_major_version ~ "." ~ core_minor_version ~ "." ~ core_patch_version %}
{% set bindings_major_version = bindings_version.split(".")[0]|int %}
{% set bindings_minor_version = bindings_version.split(".")[1]|int %}
{% set bindings_patch_version = bindings_version.split(".")[2]|int %}
{% set bindings_ver = bindings_major_version ~ "." ~ bindings_minor_version ~ "." ~ bindings_patch_version %}
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win64]
{% set subdir = "" %}
{% set subdir = os.sep.join(["", "targets", target_name]) %}  # [linux64 or aarch64]
{% set subdir = os.sep.join(["", "Library"]) %}               # [win64]

package:
  name: cuda-python-split
  version: 1

source:
  url: https://github.com/NVIDIA/cuda-python/releases/download/{{ git_tag }}/cuda-python-{{ git_tag }}.tar.gz
  sha256: 190f65d08bf412bec7235e89d9d30ceaa38ba348e48a0385e791517be7c221f6

build:
  number: 0
  skip: true  # [py < 39 or ppc64le or osx]

# Have certain top-level requirements so conda-smithy can render the correct variants
requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
  host:
    - python


outputs:

  - name: cuda-python
    version: {{ bindings_ver }}
    script: build_output.sh   # [linux]
    script: build_output.bat  # [win]
    build:
      noarch: python
      number: {{ number|int + 1 }}
      skip: true  # [not build_bindings or not linux64]
    requirements:
      host:
        - python {{ python_min }}.*
        - pip
        - setuptools
      run:
        - python >={{ python_min }}
        - {{ pin_subpackage('cuda-bindings', max_pin='x.x') }}
        - cuda-version >=13.0,<14.0a0
    test:
      requires:
        - python >={{ python_min }}
      imports:
        - cuda.bindings
        - cuda.bindings.driver
        - cuda.bindings.runtime
        - cuda.bindings.cufile  # [linux]
        - cuda.bindings.nvrtc
        - cuda.bindings.nvjitlink
        - cuda.bindings.nvvm
      commands:
        - python -c "import importlib.metadata; importlib.metadata.version('cuda-python')"
    about:
      home: https://nvidia.github.io/cuda-python/
      license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
      license_file: cuda_python/LICENSE
      license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
      summary: CUDA Python
      description: |
        CUDA Python is the home for accessing NVIDIAâ€™s CUDA platform from Python.
      doc_url: https://nvidia.github.io/cuda-python/
      dev_url: https://github.com/NVIDIA/cuda-python

  - name: cuda-bindings
    version: {{ bindings_ver }}
    script: build_output.sh   # [linux]
    script: build_output.bat  # [win]
    build:
      number: {{ number }}
      skip: true  # [not build_bindings]
      script_env:
        # Ensure that CUDA includes can be found by the host compiler
        - CUDA_HOME={{ PREFIX ~ subdir }}
        - LIB={{ PREFIX ~ subdir }}\lib\{{ target_name }};%LIB%  # [win64]
      run_exports:
        - {{ pin_subpackage('cuda-python', min_pin='x', max_pin='x') }}
      ignore_run_exports_from:
        # The run-exports from these dev packages are too tight, so we ignore them.
        # The cuda-python package supports CUDA Enhanced Compatibility through its
        # use of dlopen, so it is compatible with other CUDA minor versions.
        - cuda-nvvm-impl
        - cuda-cudart-dev
        - cuda-cudart-static
        - cuda-nvrtc-dev
        - libcufile-dev  # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python                              # [build_platform != target_platform]
        - cython                              # [build_platform != target_platform]
      host:
        # cuda.bindings needs to be built with the matching major.minor headers
        - cuda-version {{ bindings_major_version }}.{{ bindings_minor_version }}
        - cuda-crt-dev_{{ target_platform }}
        - cuda-cudart-dev
        - cuda-cudart-static
        - cuda-cudart
        - cuda-nvvm-impl
        - cuda-nvrtc
        - cuda-nvrtc-dev
        - cuda-profiler-api
        - libcufile      # [linux]
        - libcufile-dev  # [linux]
        - cython
        - pip
        - pyclibrary
        - python
        - setuptools
      run:
        - python
        - cuda-pathfinder >=1.1.0,<2
        - {{ pin_compatible('cuda-version', min_pin='x', max_pin='x') }}
        # cuda-python requires cuda-nvrtc from the same major version. We ignored
        # run-exports of cuda-nvrtc-dev and instead allow a looser pinning here.
        # Same for cuda-nvvm-impl.
        - {{ pin_compatible('cuda-nvrtc', min_pin='x', max_pin='x') }}
        - {{ pin_compatible('cuda-nvvm-impl', min_pin='x', max_pin='x') }}
        - {{ pin_compatible('libcufile', min_pin='x', max_pin='x') }}  # [linux]
        - libnvjitlink >=13.0,<14.0a0
        - pywin32  # [win64]
        - numpy  # [linux]
      run_constrained:
        # cuda-cudart is not a hard dependency because cuda-python statically links to
        # cudart. This package is optionally dlopen'd for getting the local cudart
        # version with cuda.cudart.getLocalRuntimeVersion(). We ignored run-exports
        # of cuda-cudart-dev and instead allow a looser pinning here.
        - {{ pin_compatible('cuda-cudart', min_pin='x', max_pin='x') }}
        - {{ pin_subpackage('cuda-python', max_pin='x.x') }}
    test:
      requires:
        - cuda-nvcc
        - cuda-nvrtc-dev
        - cuda-profiler-api
        - cython
        - setuptools
      files:
        - test_cimport.pyx
      commands:
        - export C_INCLUDE_PATH="$CONDA_PREFIX/{{ subdir }}/include"  # [linux]
        - set "CL=%CL% /I%CONDA_PREFIX%\{{ subdir }}\include"         # [win]
        - cythonize -i -3 test_cimport.pyx
        - python -c "import test_cimport; test_cimport.test()"
        - python -c "import cuda.bindings; print(cuda.bindings.__version__)"
      imports:
        - cuda
        - cuda.bindings
        - cuda.bindings.driver
        - cuda.bindings.runtime
        - cuda.bindings.cufile  # [linux]
        - cuda.bindings.nvrtc
        - cuda.bindings.nvjitlink
        - cuda.bindings.nvvm
    about:
      home: https://nvidia.github.io/cuda-python/cuda-bindings
      license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
      license_file: cuda_bindings/LICENSE
      license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
      summary: CUDA Python Low-level Bindings
      description: |
        CUDA Python provides a standard set of low-level interfaces,
        providing full coverage of and access to the CUDA host APIs from Python.
      doc_url: https://nvidia.github.io/cuda-python/cuda-bindings
      dev_url: https://github.com/NVIDIA/cuda-python

  - name: cuda-core
    version: {{ core_ver }}
    script: build_output.sh   # [linux]
    script: build_output.bat  # [win]
    build:
      number: {{ number }}
      skip: true  # [not build_core]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python                              # [build_platform != target_platform]
        - cython                              # [build_platform != target_platform]
      host:
        - cython
        - pip
        - python
        - setuptools
      run:
        - python
        - cuda-version >=11.2,<14
        - numpy
        - cuda-bindings
    test:
      commands:
        - python -c "from cuda.core.experimental import Device"
        - python -c "from cuda.core.experimental import utils"
    about:
      home: https://nvidia.github.io/cuda-python/cuda-core
      license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
      license_file: cuda_core/LICENSE
      license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
      summary: "cuda.core: (experimental) pythonic CUDA module"
      description: |
        cuda.core bridges Python's productivity with CUDA's performance through intuitive and pythonic APIs.
        The mission is to provide users full access to all of the core CUDA features in Python, such as
        runtime control, compiler and linker.
      doc_url: https://nvidia.github.io/cuda-python/cuda-core
      dev_url: https://github.com/NVIDIA/cuda-python

about:
  home: https://nvidia.github.io/cuda-python/
  license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
  license_file: LICENSE.md
  license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
  summary: CUDA Python
  description: |
    CUDA Python is the home for accessing NVIDIA's CUDA platform from Python.
  doc_url: https://nvidia.github.io/cuda-python/
  dev_url: https://github.com/NVIDIA/cuda-python

extra:
  feedstock-name: cuda-python
  recipe-maintainers:
    - bdice
    - jakirkham
    - leofang
    - m3vaz
    - mmccarty
    - vyasr
    - vzhurba01
    - kkraus14
    - oleksandr-pavlyk
