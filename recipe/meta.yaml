{% set name = "cuda-python" %}
{% set version = "12.4.0" %}
{% set major_version = version.split(".")[0]|int %}
{% set minor_version = version.split(".")[1]|int %}
{% set patch_version = version.split(".")[2]|int %}
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/NVIDIA/cuda-python/archive/refs/tags/v{{ version }}.tar.gz
  sha256: ba983dbb91a7f51553315fe14f1fbcbb4920f8f2e9bb47620735d2d63c33e673

build:
  number: 0
  {% if not (environ.get("cuda_compiler_version")|string()).startswith(major_version|string()) %}
  skip: true
  {% endif %}
  script:
    - set "INCLUDE=%INCLUDE%;%BUILD_PREFIX%\Library\include"  # [win64]
    - {{ PYTHON }} setup.py build_ext --inplace -j1
    - {{ PYTHON }} -m pip install . --no-deps -vv
  script_env:
    # Ensure that CUDA includes can be found by the host compiler
    - CUDA_HOME="${PREFIX}/targets/{{ target_name }}"  # [linux]
    - CUDA_HOME=%PREFIX%\Library                       # [win64]
  run_exports:
    - {{ pin_subpackage('cuda-python', min_pin='x', max_pin='x') }}
  ignore_run_exports_from:
    - {{ compiler('cuda') }}
    # The run-exports from these dev packages are too tight, so we ignore them.
    # The cuda-python package supports CUDA Enhanced Compatibility through its
    # use of dlopen, so it is compatible with other CUDA minor versions.
    - cuda-cudart-dev
    - cuda-nvrtc-dev

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - cuda-version {{ major_version }}.{{ minor_version }}
    - sysroot_{{ target_platform }} 2.17  # [linux]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
    - python                              # [build_platform != target_platform]
    - cython                              # [build_platform != target_platform]
  host:
    - cuda-cudart-dev
    - cuda-cudart
    - cuda-nvrtc-dev
    - cuda-nvrtc
    - cuda-profiler-api
    - cython
    - pip
    - pyclibrary
    - python
    - setuptools
    - tomli  # [py<311]
    - cuda-version {{ major_version }}.{{ minor_version }}
  run:
    - python
    # cuda-python requires cuda-nvrtc from the same major version. We ignored
    # run-exports of cuda-nvrtc-dev and instead allow a looser pinning here.
    - {{ pin_compatible('cuda-nvrtc', min_pin='x', max_pin='x') }}
    - {{ pin_compatible('cuda-version', min_pin='x', max_pin='x') }}
    - pywin32  # [win]
  run_constrained:
    # cuda-cudart is not a hard dependency because cuda-python re-implements
    # cudart. This package is optionally dlopen'd for getting the local cudart
    # version with cuda.cudart.getLocalRuntimeVersion(). We ignored run-exports
    # of cuda-cudart-dev and instead allow a looser pinning here.
    - {{ pin_compatible('cuda-cudart', min_pin='x', max_pin='x') }}

test:
  imports:
    - cuda
    - cuda.cuda
    - cuda.cudart

about:
  home: https://github.com/NVIDIA/cuda-python
  license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
  license_file: LICENSE
  license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
  summary: CUDA Python Low-level Bindings
  description: |
    CUDA Python provides a standard set of low-level interfaces,
    providing full coverage of and access to the CUDA host APIs from Python.
  doc_url: https://nvidia.github.io/cuda-python/
  dev_url: https://github.com/NVIDIA/cuda-python

extra:
  recipe-maintainers:
    - bdice
    - jakirkham
    - leofang
    - m3vaz
    - mmccarty
    - vyasr
