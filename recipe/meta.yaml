{% set number = 1 %}
{% set version = "12.9.4" %}
{% set sha256 = "e08eac307f3f17bf163ffc9d1a493bb93c10e94948a4117b7e33d76452ae0b79" %}

{% set is_freethreading = environ.get("is_freethreading", False) %}
{% set bindings_major_version = version.split(".")[0]|int %}
{% set bindings_minor_version = version.split(".")[1]|int %}
{% set bindings_patch_version = version.split(".")[2]|int %}
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win64]
{% set subdir = "" %}
{% set subdir = os.sep.join(["", "targets", target_name]) %}  # [linux64 or aarch64]
{% set subdir = os.sep.join(["", "Library"]) %}               # [win64]

package:
  name: cuda-python-split
  version: 1

source:
  url: https://github.com/NVIDIA/cuda-python/releases/download/v{{ version }}/cuda-python-v{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [py < 39 or ppc64le or osx]

# Have certain top-level requirements so conda-smithy can render the correct variants
requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
  host:
    - python

outputs:

  - name: cuda-python
    version: {{ version }}
    script: build_output.sh   # [linux]
    script: build_output.bat  # [win]
    build:
      noarch: python
      number: {{ number }}
      skip: true  # [not linux64]
    requirements:
      host:
        - python {{ python_min }}.*
        - pip
        - setuptools
      run:
        - python >={{ python_min }}
        - {{ pin_subpackage('cuda-bindings', max_pin='x.x') }}
        - cuda-version >=12.0,<13.0a0  # [not aarch64]
        - cuda-version >=12.0,<12.2a0  # [aarch64 and not cufile_supported]
        - cuda-version >=12.2,<13.0a0  # [aarch64 and cufile_supported]
    test:
      requires:
        - python >={{ python_min }}
      imports:
        - cuda.bindings
        - cuda.bindings.driver
        - cuda.bindings.runtime
        - cuda.bindings.cufile  # [linux]
        - cuda.bindings.nvrtc
        - cuda.bindings.nvjitlink
        - cuda.bindings.nvvm
      commands:
        - python -c "import importlib.metadata; importlib.metadata.version('cuda-python')"
    about:
      home: https://nvidia.github.io/cuda-python/
      license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
      license_file: cuda_python/LICENSE
      license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
      summary: CUDA Python
      description: |
        CUDA Python is the home for accessing NVIDIAâ€™s CUDA platform from Python.
      doc_url: https://nvidia.github.io/cuda-python/
      dev_url: https://github.com/NVIDIA/cuda-python

  - name: cuda-bindings
    version: {{ version }}
    script: build_output.sh   # [linux]
    script: build_output.bat  # [win]
    build:
      number: {{ number }}
      script_env:
        # Ensure that CUDA includes can be found by the host compiler
        - CUDA_HOME={{ PREFIX ~ subdir }}
      ignore_run_exports_from:
        # The run-exports from these dev packages are too tight, so we ignore them.
        # The cuda-python package supports CUDA Enhanced Compatibility through its
        # use of dlopen, so it is compatible with other CUDA minor versions.
        - cuda-nvcc-impl
        - cuda-cudart-dev
        - cuda-cudart-static
        - cuda-nvrtc-dev
        - libcufile-dev  # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python                              # [build_platform != target_platform]
        - cython                              # [build_platform != target_platform]
      host:
        # cuda.bindings needs to be built with the matching major.minor headers
        - cuda-version {{ bindings_major_version }}.{{ bindings_minor_version }}
        - cuda-crt-dev_{{ target_platform }}
        - cuda-cudart-dev
        - cuda-cudart-static
        - cuda-cudart
        - cuda-nvcc-impl
        - cuda-nvrtc
        - cuda-nvrtc-dev
        - cuda-profiler-api
        - libcufile      # [linux and cufile_supported]
        - libcufile-dev  # [linux]
        - cython
        - pip
        - pyclibrary
        - python
        - setuptools
      run:
        - python
        - cuda-pathfinder >=1.1.0,<2
        - {{ pin_compatible('cuda-version', min_pin='x', max_pin='x') }}  # [not aarch64]
        - cuda-version >=12.0,<12.2a0  # [aarch64 and not cufile_supported]
        - cuda-version >=12.2,<13.0a0  # [aarch64 and cufile_supported]
        # cuda-python requires cuda-nvrtc from the same major version. We ignored
        # run-exports of cuda-nvrtc-dev and instead allow a looser pinning here.
        # Same for cuda-nvcc-impl.
        - {{ pin_compatible('cuda-nvrtc', min_pin='x', max_pin='x') }}
        - {{ pin_compatible('cuda-nvcc-impl', min_pin='x', max_pin='x') }}
        - {{ pin_compatible('libcufile', min_pin='x', max_pin='x') }}  # [linux and cufile_supported]
        - libnvjitlink >=12.3,<13
        - numpy  # [linux]
      run_constrained:
        # cuda-cudart is not a hard dependency because cuda-python statically links to
        # cudart. This package is optionally dlopen'd for getting the local cudart
        # version with cuda.cudart.getLocalRuntimeVersion(). We ignored run-exports
        # of cuda-cudart-dev and instead allow a looser pinning here.
        - {{ pin_compatible('cuda-cudart', min_pin='x', max_pin='x') }}
        - {{ pin_subpackage('cuda-python', max_pin='x.x') }}
    test:
      requires:
        - cuda-nvcc
        - cuda-nvrtc-dev
        - cuda-profiler-api
        - cython
        - pip
      files:
        - test_cimport.pyx
      commands:
        - export C_INCLUDE_PATH="$CONDA_PREFIX/{{ subdir }}/include"  # [linux]
        - set "CL=%CL% /I%CONDA_PREFIX%\{{ subdir }}\include"         # [win]
        # workaround for https://github.com/conda-forge/setuptools-feedstock/issues/399 
        - pip install setuptools
        - cythonize -i -3 -Xfreethreading_compatible=True *.pyx
        - python -c "import test_cimport; test_cimport.test()"
        - python -c "import cuda.bindings; print(cuda.bindings.__version__)"
      imports:
        - cuda
        - cuda.cuda
        - cuda.cudart
        - cuda.bindings
        - cuda.bindings.driver
        - cuda.bindings.runtime
        - cuda.bindings.cufile  # [linux]
        - cuda.bindings.nvrtc
        - cuda.bindings.nvjitlink
        - cuda.bindings.nvvm
    about:
      home: https://nvidia.github.io/cuda-python/cuda-bindings
      license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
      license_file: cuda_bindings/LICENSE
      license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
      summary: CUDA Python Low-level Bindings
      description: |
        CUDA Python provides a standard set of low-level interfaces,
        providing full coverage of and access to the CUDA host APIs from Python.
      doc_url: https://nvidia.github.io/cuda-python/cuda-bindings
      dev_url: https://github.com/NVIDIA/cuda-python

about:
  home: https://nvidia.github.io/cuda-python/
  license: LicenseRef-NVIDIA-SOFTWARE-LICENSE
  license_file: LICENSE.md
  license_url: https://github.com/NVIDIA/cuda-python/blob/main/LICENSE
  summary: CUDA Python
  description: |
    CUDA Python is the home for accessing NVIDIA's CUDA platform from Python.
  doc_url: https://nvidia.github.io/cuda-python/
  dev_url: https://github.com/NVIDIA/cuda-python

extra:
  feedstock-name: cuda-python
  recipe-maintainers:
    - cpcloud
    - bdice
    - jakirkham
    - leofang
    - m3vaz
    - mmccarty
    - vyasr
    - vzhurba01
    - kkraus14
    - oleksandr-pavlyk
